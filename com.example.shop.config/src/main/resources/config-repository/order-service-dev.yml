server:
  port: 19500

spring:
  datasource:
    url: jdbc:h2:mem:test;MODE=MySQL;DB_CLOSE_DELAY=-1 # 실제 서비스에서는 env 등으로 관리
    driverClassName: org.h2.Driver
    username: sa # 실제 서비스에서는 env 등으로 관리
    password: # 실제 서비스에서는 env 등으로 관리
  h2:
    console:
      enabled: true
      path: /h2
  jpa:
    defer-datasource-initialization: true
    open-in-view: false # 트랜잭션 범위 밖에서 영속성 컨텍스트를 유지할지 여부
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update # create-drop, update, validate, none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 500
        use_sql_comments: true

management:
  zipkin:
    tracing:
      endpoint: "http://localhost:9411/api/v2/spans"
  tracing:
    sampling:
      probability: 1.0

resilience4j:
  circuitbreaker:
    configs:
      default:  # 기본 구성 이름
        registerHealthIndicator: true  # 애플리케이션의 헬스 체크에 서킷 브레이커 상태를 추가하여 모니터링 가능
        # 서킷 브레이커가 동작할 때 사용할 슬라이딩 윈도우의 타입을 설정
        # COUNT_BASED: 마지막 N번의 호출 결과를 기반으로 상태를 결정
        # TIME_BASED: 마지막 N초 동안의 호출 결과를 기반으로 상태를 결정
        slidingWindowType: COUNT_BASED  # 슬라이딩 윈도우의 타입을 호출 수 기반(COUNT_BASED)으로 설정
        # 슬라이딩 윈도우의 크기를 설정
        # COUNT_BASED일 경우: 최근 N번의 호출을 저장
        # TIME_BASED일 경우: 최근 N초 동안의 호출을 저장
        slidingWindowSize: 20  # 슬라이딩 윈도우의 크기
        minimumNumberOfCalls: 20  # 서킷 브레이커가 동작하기 위해 필요한 최소한의 호출 수
        slowCallRateThreshold: 80  # 느린 호출의 비율이 이 임계값(80%)을 초과하면 서킷 브레이커가 동작
        slowCallDurationThreshold: 6000  # 느린 호출의 기준 시간(밀리초)
        failureRateThreshold: 50  # 실패율이 이 임계값(50%)을 초과하면 서킷 브레이커가 동작
        permittedNumberOfCallsInHalfOpenState: 3  # 서킷 브레이커가 Half-open 상태에서 허용하는 최대 호출 수
        # 서킷 브레이커가 Open 상태에서 Half-open 상태로 전환되기 전에 기다리는 시간
        waitDurationInOpenState: 20s  # Open 상태에서 Half-open 상태로 전환되기 전에 대기하는 시간
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s
        cancelRunningFuture: true