plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.epages.restdocs-api-spec' version "0.19.4"
}

group = 'com.example.shop'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://jitpack.io' }
}

ext {
    set('springCloudVersion', "2025.0.0")
}

dependencies {
    // global
    implementation 'com.github.jaybon1:example-shop-springboot-msa-global:0.0.2'

    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // client
//    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // db
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'

    // cache
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // restdocs & openapi
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.4'

    // querydsl
    implementation "com.querydsl:querydsl-jpa:5.1.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation 'org.jetbrains:annotations:24.1.0'

    // load balancer
    implementation "org.springframework.cloud:spring-cloud-starter-loadbalancer"
//    implementation 'com.github.ben-manes.caffeine:caffeine'

    // circuit breaker
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'

    // jwt
    implementation 'com.auth0:java-jwt:4.4.0'

    // monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "io.micrometer:micrometer-tracing-bridge-brave"
    implementation "io.zipkin.reporter2:zipkin-reporter-brave"

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

compileJava {
    dependsOn 'clean'
}

postman {
    baseUrl = 'http://localhost:19200'
    title = 'PAYMENT API'
    version = '1.0.0'
}

openapi3 {
    servers = [
            {
                url = 'http://localhost:19200'
            }
    ]
    title = 'PAYMENT API'
    description = ''
    version = '1.0.0'
    format = 'json'
}

tasks.register('setDocs') {
    dependsOn 'postman'
    dependsOn 'openapi3'
    doLast {
        copy {
            from "build/api-spec"
            include "*.json"
            include "*.yaml"
            into "build/resources/main/static/springdoc"
            rename { String fileName ->
                if (fileName.endsWith('.json')) {
                    return fileName.replace('.json', '-payment-service.json')
                } else if (fileName.endsWith('.yaml')) {
                    return fileName.replace('.yaml', '-payment-service.yml')
                }
                return fileName
            }
        }
    }
}

bootRun {
    dependsOn 'setDocs'
}

bootJar {
    dependsOn 'setDocs'
}
